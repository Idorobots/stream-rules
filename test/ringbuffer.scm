(load "../test/testing.scm")
(load "../src/ringbuffer.scm")

(describe
 "ringbuffer"
 (it "should store stuff correctly"
     (define b (ring-buffer 5))
     (assert null? (ring-buffer-ref b 0))
     (ring-buffer-store! b 23)
     (assert equal? (ring-buffer-ref b 0) 23)
     (assert null? (ring-buffer-ref b 1))
     (ring-buffer-store! b 5)
     (assert equal? (ring-buffer-ref b 1) 5))
 (it "should iterate the right amount of data"
     (define count 0)
     (define (inc-count . args)
       (set! count (+ 1 count)))
     (define b (ring-buffer 5))
     (ring-buffer-foreach b inc-count)
     (assert equal? count 0)
     (ring-buffer-store! b 23)
     (ring-buffer-foreach b inc-count)
     (assert equal? count 1)
     (ring-buffer-store! b 5)
     (ring-buffer-store! b 13)
     (ring-buffer-store! b 7)
     (ring-buffer-foreach b inc-count)
     (assert equal? count 5)
     (let loop ((i 0))
       (when (< i 13)
         (ring-buffer-store! b i)
         (loop (+ 1 i))))
     (ring-buffer-foreach b inc-count)
     (assert equal? count 9))
 (it "should overwrite the beginning of the buffer"
     (define b (ring-buffer 5))
     (ring-buffer-store! b 23)
     (let loop ((i 0))
       (when (< i 9)
         (ring-buffer-store! b 0)
         (loop (+ 1 i))))
     (ring-buffer-foreach b (lambda (i v)
                              (assert equal? v 0)))
     (ring-buffer-store! b 23)
     (assert equal? (ring-buffer-ref b 5) 23)))
